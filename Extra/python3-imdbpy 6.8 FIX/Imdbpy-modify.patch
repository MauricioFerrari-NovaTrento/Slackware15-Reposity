--- imdbpy-6.8/imdb/__init__.py-original	2019-07-20 04:28:56.000000000 -0300
+++ imdbpy-6.8/imdb/__init__.py	2021-01-23 22:14:27.767233682 -0300
@@ -1,4 +1,4 @@
-# Copyright 2004-2019 Davide Alberani <da@erlug.linux.it>
+# Copyright 2004-2020 Davide Alberani <da@erlug.linux.it>
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -25,7 +25,7 @@
 
 __all__ = ['IMDb', 'IMDbError', 'Movie', 'Person', 'Character', 'Company',
            'available_access_systems']
-__version__ = VERSION = '6.8'
+__version__ = VERSION = '6.9dev20200613'
 
 
 import logging
@@ -76,7 +76,7 @@
 # http://www.imdb.com/company/co%s/
 imdbURL_company_main = imdbURL_company_base + 'co%s/'
 # http://www.imdb.com/keyword/%s/
-imdbURL_keyword_main = imdbURL_base + 'keyword/%s/'
+imdbURL_keyword_main = imdbURL_base + 'search/keyword/?keywords=%s'
 # http://www.imdb.com/chart/top
 imdbURL_top250 = imdbURL_base + 'chart/top'
 # http://www.imdb.com/chart/bottom
@@ -292,11 +292,19 @@
         # http://www.imdb.com/company/co%s/
         imdbURL_company_main = imdbURL_company_base + 'co%s/'
         # http://www.imdb.com/keyword/%s/
-        imdbURL_keyword_main = imdbURL_base + 'keyword/%s/'
+        imdbURL_keyword_main = imdbURL_base + '/search/keyword?keywords=%s'
         # http://www.imdb.com/chart/top
         imdbURL_top250 = imdbURL_base + 'chart/top'
         # http://www.imdb.com/chart/bottom
         imdbURL_bottom100 = imdbURL_base + 'chart/bottom'
+        # http://www.imdb.com/chart/moviemeter
+        imdbURL_moviemeter100 = imdbURL_base + 'chart/moviemeter'
+        # http://www.imdb.com/chart/tvmeter
+        imdbURL_tvmeter100 = imdbURL_base + 'chart/tvmeter'
+        # http://www.imdb.com/chart/toptv
+        imdbURL_toptv250 = imdbURL_base + 'chart/toptv'
+        # https://www.imdb.com/india/top-rated-indian-movies
+        imdbURL_topindian250 = imdbURL_base + 'india/top-rated-indian-movies'
         # http://www.imdb.com/find?%s
         imdbURL_find = imdbURL_base + 'find?%s'
         # http://www.imdb.com/search/title?%s
@@ -313,6 +321,10 @@
             keyword_main=imdbURL_keyword_main,
             top250=imdbURL_top250,
             bottom100=imdbURL_bottom100,
+            moviemeter100=imdbURL_moviemeter100,
+            tvmeter100=imdbURL_tvmeter100,
+            toptv250=imdbURL_toptv250,
+            topindian250=imdbURL_topindian250,
             find=imdbURL_find,
             search_movie_advanced=imdbURL_search_movie_advanced)
 
@@ -603,13 +615,13 @@
             results = 100
         return self._search_keyword(keyword, results)
 
-    def _get_keyword(self, keyword, results):
+    def _get_keyword(self, keyword, results, page):
         """Return a list of tuples (movieID, {movieData})"""
         # XXX: for the real implementation, see the method of the
         #      subclass, somewhere under the imdb.parser package.
         raise NotImplementedError('override this method')
 
-    def get_keyword(self, keyword, results=None):
+    def get_keyword(self, keyword, results=None, page=None):
         """Return a list of movies for the given keyword."""
         if results is None:
             results = self._keywordsResults
@@ -617,7 +629,7 @@
             results = int(results)
         except (ValueError, OverflowError):
             results = 100
-        res = self._get_keyword(keyword, results)
+        res = self._get_keyword(keyword, results, page)
         return [Movie.Movie(movieID=self._get_real_movieID(mi),
                 data=md, modFunct=self._defModFunct,
                 accessSystem=self.accessSystem) for mi, md in res][:results]
@@ -644,6 +656,35 @@
                 data=md, modFunct=self._defModFunct,
                 accessSystem=self.accessSystem) for mi, md in res]
 
+    def get_top250_tv(self):
+        """Return the list of the top 250 tv shows."""
+        res = self._get_top_bottom_movies('toptv')
+        return [Movie.Movie(movieID=self._get_real_movieID(mi),
+                data=md, modFunct=self._defModFunct,
+                accessSystem=self.accessSystem) for mi, md in res]
+
+    def get_popular100_movies(self):
+        """Return the list of the 100 most popular movies."""
+        res = self._get_top_bottom_movies('moviemeter')
+        return [Movie.Movie(movieID=self._get_real_movieID(mi),
+                data=md, modFunct=self._defModFunct,
+                accessSystem=self.accessSystem) for mi, md in res]
+
+    def get_popular100_tv(self):
+        """Return the list of the 100 most popular tv shows."""
+        res = self._get_top_bottom_movies('tvmeter')
+        return [Movie.Movie(movieID=self._get_real_movieID(mi),
+                data=md, modFunct=self._defModFunct,
+                accessSystem=self.accessSystem) for mi, md in res]
+
+    def get_top250_indian_movies(self):
+        """Return the list of the top 250 indian movies."""
+        res = self._get_top_bottom_movies('topindian250')
+        return [Movie.Movie(movieID=self._get_real_movieID(mi),
+                data=md, modFunct=self._defModFunct,
+                accessSystem=self.accessSystem) for mi, md in res]
+
+
     def new_movie(self, *arguments, **keywords):
         """Return a Movie object."""
         # XXX: not really useful...
@@ -758,6 +799,68 @@
                 mop.update_charactersRefs(ret['charactersRefs'])
         mop.set_data(res, override=0)
 
+    def update_series_seasons(self, mop, season_nums, override=0):
+        """Given a Movie object with only retrieve the season data.
+
+        season_nums is the list of the specific seasons to retrieve.
+
+        If override is set, the information are retrieved and updated
+        even if they're already in the object."""
+        mopID = None
+        if isinstance(mop, Movie.Movie):
+            mopID = mop.movieID
+        else:
+            raise IMDbError('object ' + repr(mop) + ' is not a Movie instance')
+        if mopID is None:
+            raise IMDbDataAccessError('supplied object has null movieID, personID or companyID')
+        if mop.accessSystem == self.accessSystem:
+            aSystem = self
+        else:
+            aSystem = IMDb(mop.accessSystem)
+
+        info = 'episodes'
+
+        res = {}
+        
+        if info in mop.current_info and not override:
+            return
+        _imdb_logger.debug('retrieving "%s" info set', info)
+        try:
+            method = getattr(aSystem, 'get_movie_episodes')
+        except AttributeError:
+            _imdb_logger.error('unknown information set "%s"', info)
+            # Keeps going.
+            method = lambda *x: {}
+        try:
+            ret = method(mopID, season_nums)
+        except Exception:
+            _imdb_logger.critical(
+                'caught an exception retrieving or parsing "%s" info set'
+                ' for mopID "%s" (accessSystem: %s)',
+                info, mopID, mop.accessSystem, exc_info=True
+            )
+            ret = {}
+            # If requested by the user, reraise the exception.
+            if self._reraise_exceptions:
+                raise
+        keys = None
+        if 'data' in ret:
+            res.update(ret['data'])
+            if isinstance(ret['data'], dict):
+                keys = list(ret['data'].keys())
+        if 'info sets' in ret:
+            for ri in ret['info sets']:
+                mop.add_to_current_info(ri, keys, mainInfoset=info)
+        else:
+            mop.add_to_current_info(info, keys)
+        if 'titlesRefs' in ret:
+            mop.update_titlesRefs(ret['titlesRefs'])
+        if 'namesRefs' in ret:
+            mop.update_namesRefs(ret['namesRefs'])
+        if 'charactersRefs' in ret:
+            mop.update_charactersRefs(ret['charactersRefs'])
+        mop.set_data(res, override=0)
+
     def get_imdbMovieID(self, movieID):
         """Translate a movieID in an imdbID (the ID used by the IMDb
         web server); must be overridden by the subclass."""
